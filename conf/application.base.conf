# The base config file for all dev and environment-specific config files

# This is needed for the play-redis library. Without it, it won't store auth information in the cache and you can't log in.
akka.actor.allow-java-serialization = "on"
akka.actor.warn-about-java-serializer-usage = "off"

auth.secret = ${AUTH_SECRET}

consignmentapi.url = ${consignmentapi.domain}"/graphql"

logout.url="http://localhost:9000/sign-out"

aws {
  cognito.url = "https://cognito-identity.eu-west-2.amazonaws.com"
  sts.url = "https://sts.amazonaws.com"
  s3 {
    # We need to specify both S3 URLs because the first upload request is always sent to the us-east-1 bucket URL, and
    # then falls back to the eu-west-2 URL. See TDR-947.
    us-bucket-url = "https://"${aws.s3.upload-bucket}".s3.amazonaws.com"
    uk-bucket-url = "https://"${aws.s3.upload-bucket}".s3.eu-west-2.amazonaws.com"
  }
}

play {
  http {
    port = 9000
    errorHandler = "errors.ErrorHandler"
  }

  # TDR depends on the Redis cache being available because it is used to store Keycloak parameters like the state
  # parameter during login, so return an error rather than ignoring any cache errors
  cache.redis.recovery = log-and-fail

  i18n.langs = ["en-gb"]

  modules.enabled += "modules.SecurityModule"
  modules.enabled += "play.api.cache.redis.RedisCacheModule"

  # Add custom Content Security Policy to every page
  filters.enabled += play.filters.csp.CSPFilter
  filters.csp.directives {
    # By default, only load content (JS, images, API calls, etc.) from the same domain as this TDR frontend site
    default-src = 'self'
    # Override the default CSP script-src, which allows unsafe inline scripts. Allow 'eval' because keycloak-js has a
    # dependency which uses it. See TDR-1002.
    script-src = 'self' 'unsafe-eval'
    # Allow scripts to fetch data from TDR domains and AWS domains
    connect-src = 'self' ${auth.url} ${aws.cognito.url} ${aws.sts.url} ${consignmentapi.domain} ${aws.s3.us-bucket-url} ${aws.s3.uk-bucket-url}
    # Allow browser to load Keycloak iframe to support the OAuth2 silent authentication flow
    child-src = 'self' ${auth.url}
  }
}

region = "eu-west-2"
