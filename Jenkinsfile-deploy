pipeline {
  agent none
  parameters {
    choice(name: "STAGE", choices: ["intg", "staging", "prod"], description: "The stage you are building the front end for")
  }
  stages {
    stage("Test") {
        agent {
            ecs {
                inheritFrom "sbt"
            }
        }
        steps {
            checkout scm
            sh "sbt dist"
            stash includes: "Dockerfile", name: "Dockerfile"
            stash includes: "target/universal/tdr-transfer-frontend-*.zip", name: "tdr-transfer-frontend-zip"
        }
    }
    stage("Docker") {
        agent {
            label "master"
        }
        steps {
            unstash "tdr-transfer-frontend-zip"
            unstash "Dockerfile"
            script {
                docker.withRegistry('', 'docker') {
                    docker.build("nationalarchives/tdr-transfer-frontend:${params.STAGE}").push()
                    slackSend color: "good", message: "The front end app has been pushed to docker hub", channel: "#tdr"
                }
            }
        }
    }
    stage("Update ECS container") {
        agent {
            ecs {
                inheritFrom "aws"
            }
        }
        steps {
            script {
                def stageToAccount = [
                    "intg": env.INTG_ACCOUNT,
                    "staging": env.STAGING_ACCOUNT
                ]
                sh "python /update_service.py ${stageToAccount.get(STAGE)} ${STAGE} frontend"
                slackSend color: "good", message: "The front end app has been updated in ECS", channel: "#tdr"
            }
        }
    }
  }
}
