pipeline {
  agent none
  parameters {
    choice(name: "STAGE", choices: ["intg", "staging", "prod"], description: "The stage you are building the front end for")
  }
  stages {
    stage("Test") {
        agent {
            ecs {
                inheritFrom "sbt"
            }
        }
        steps {
            checkout scm
            sh "sbt dist"
            stash includes: "Dockerfile", name: "Dockerfile"
            stash includes: "target/universal/tdr-transfer-frontend-*.zip", name: "tdr-transfer-frontend-zip"
        }
    }
    stage("Docker") {
        agent {
            label "master"
        }
        steps {
            unstash "tdr-transfer-frontend-zip"
            unstash "Dockerfile"
            sh "docker build -t nationalarchives/tdr-transfer-frontend:${params.STAGE} ."
            withCredentials([usernamePassword(credentialsId: "docker", usernameVariable: "USERNAME", passwordVariable: "PASSWORD")]) {
                sh "echo $PASSWORD | docker login --username $USERNAME --password-stdin"
                sh "docker push nationalarchives/tdr-transfer-frontend:${params.STAGE}"
                // slackSend color: "good", message: "The front end app has been pushed to docker hub", channel: "#tdr"
            }
        }
    }
    stage("Update ECS container") {
        agent {
            ecs {
                inheritFrom "aws"
            }            
        }
        steps {
            withCredentials([[
                $class: "AmazonWebServicesCredentialsBinding",
                credentialsId: "integrationTerraform",
                accessKeyVariable: "AWS_ACCESS_KEY_ID",
                secretKeyVariable: "AWS_SECRET_ACCESS_KEY"
            ]]) {
                    script {
                        def stageToAccount = [
                            "intg": env.INTEGRATION_ACCOUNT,
                            "staging": env.STAGING_ACCOUNT
                        ]
                        sh "python /update_service.py ${stageToAccount.get(STAGE)} ${stage} frontend"
                    }
            }
        }
    }
  }
}
