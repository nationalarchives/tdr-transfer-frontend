def releaseBranch = "release-${env.STAGE}"

pipeline {
  agent {
    label "master"
  }
  parameters {
    choice(name: "STAGE", choices: ["intg", "staging", "prod"], description: "The stage you are building the front end for")
    string(name: "TO_DEPLOY", description: "The git tag, branch or commit reference to deploy, e.g. 'v123'")
  }
  stages {
    stage("Build") {
      agent {
        ecs {
          inheritFrom "transfer-frontend"
        }
      }
      steps {
        checkout scm
        sh "npm ci"
        sh "npm run build"
        sh 'sbt -no-colors test scalastyle'
        sh "sbt -no-colors dist"
        stash includes: "Dockerfile", name: "Dockerfile"
        stash includes: "target/universal/tdr-transfer-frontend-*.zip", name: "tdr-transfer-frontend-zip"
      }
    }
    stage("Docker") {
      agent {
        label "master"
      }
      steps {
        unstash "tdr-transfer-frontend-zip"
        unstash "Dockerfile"
        script {
          docker.withRegistry('', 'docker') {
            docker.build("nationalarchives/tdr-transfer-frontend:${params.STAGE}").push()
            slackSend color: "good", message: "The front end app has been pushed to docker hub", channel: "#tdr"
          }
        }
      }
    }
    stage("Update ECS container") {
      agent {
        ecs {
          inheritFrom "aws"
          taskrole "arn:aws:iam::${env.MANAGEMENT_ACCOUNT}:role/TDRJenkinsNodeRole${params.STAGE.capitalize()}"
        }
      }
      steps {
        script {
          def accountNumber = getAccountNumberFromStage()
          sh "python3 /update_service.py ${accountNumber} ${params.STAGE} frontend"
          slackSend color: "good", message: "The front end app has been updated in ECS", channel: "#tdr"
        }
      }
    }
    stage("Update release branch") {
      agent {
        label "master"
      }
      steps {
        sh "git branch -f ${releaseBranch} HEAD"
        sshagent(['github-jenkins']) {
          sh("git push -f origin ${releaseBranch}")
        }
      }
    }
  }
}

def getAccountNumberFromStage() {
  def stageToAccountMap = [
      "intg": env.INTG_ACCOUNT,
      "staging": env.STAGING_ACCOUNT,
      "prod": env.PROD_ACCOUNT
  ]

  return stageToAccountMap.get(params.STAGE)
}
